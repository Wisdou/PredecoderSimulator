@{
    Layout = "_Layout";
}

<h1 class="course-article">Типы данных</h1>
<article class="course-article">
    Каждое значение в Python имеет тип. Поскольку всё в Python — объекты, типы являются классами, а значения — экземплярами (объектами) этих классов.

    В Python есть разные типы, давайте рассмотрим самые основные.

    <h2>Числа</h2>
    <p>
        Целые числа, числа с плавающей запятой и комплексные числа относятся к группе чисел. В Python они представлены классами int, float и complex.
    </p>

    <h2>Строки</h2>
    <p>
        Строка представляет собой последовательность символов. Мы можем использовать одинарные или двойные кавычки для создания строки.  Многострочные строки можно обозначить тройными кавычками, ''' или """
    </p>

    <h2>Списки</h2>
    <p>
        Список представляет собой упорядоченную последовательность элементов. Он очень гибкий и является одним из самых используемых типов в Python. Элементы списка не обязательно должны быть одного типа.
    </p>

    <h2>Кортежи</h2>
    <p>
        Так же как и список, кортеж (tuple) является упорядоченной последовательностью элементов. Вся разница заключается в том, что кортежи неизменяемы.

        Кортежи используются для защиты данных от перезаписи и обычно работают быстрее, чем списки, т.к. их нельзя изменять.
    </p>

    <h2>Булевый тип</h2>
    <p>
        В языке Python логический тип данных представлен типом bool (бул, булев тип, булевый тип).
        Объекты типа bool могут принимать одно из двух значений: True (истина) или False (ложь).
        Основные операции с булевым типом:
        <ul>
            <li>Логическое ИЛИ - оператор (or)</li>
            <li>Логическое И - оператор (and)</li>
            <li>Логическое НЕТ - оператор (not)</li>
        </ul>
    </p>

    <h2>Множества</h2>
    <p>
        Множество является неупорядоченной уникализированной последовательностью. Объявляется множество с помощью элементов, разделённых запятой, внутри фигурных скобок
    </p>

    <h2>Словари</h2>
    <p>
        Словари — неупорядоченные наборы пар ключ-значение.

        Они используются, когда нужно сопоставить каждому из ключей значение и иметь возможность быстро получать доступ к значению, зная ключ. В других языках словари обычно называются map, hash или object. Словари оптимизированы для извлечения данных. Чтобы извлечь значение, нужно знать ключ.
    </p>

    <h2>Преобразование типов данных</h2>
    <p>
        Мы можем преобразовывать значения из одного типа в другой с помощью таких функций, как int(), float(), str() и т.д.

        При преобразовании числа с плавающей запятой в целое будет утеряна часть после запятой.
    </p>
</article>